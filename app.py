# app.py
import streamlit as st
import pandas as pd
import plotly.express as px
from pathlib import Path

st.set_page_config(page_title="Vehicles Dashboard", layout="wide")
st.header("üöó An√°lisis de Datos de Veh√≠culos üöó")
st.write(
    "Bienvenido a esta aplicaci√≥n web interactiva. üïπÔ∏è\n"
    "Aqu√≠ podr√°s visualizar datos relacionados con veh√≠culos de manera sencilla y din√°mica. üèÅ"
)

# Carga de datos
car_data = pd.read_csv('vehicles_us.csv')

# Mostrar peque√±as muestras para verificar
st.subheader("Vista previa de los datos")
st.dataframe(car_data.head())


#Colorear gr√°ficos por tipo de veh√≠culo 
if 'type' in car_data.columns:
    color_col = 'type'
    st.info("üé® Los gr√°ficos se colorear√°n por tipo de veh√≠culo")
else:
    color_col = None
    st.warning("‚ö†Ô∏è No se encontr√≥ la columna 'type'. Los gr√°ficos no estar√°n coloreados.")

# --- Controles (botones + checkbox) ---
hist_button = st.button("Construir histograma üìâ")
scatter_button = st.button("Construir gr√°fico de dispersi√≥n üìà")
build_bar = st.checkbox("Construir un gr√°fico de barras por tipo de veh√≠culo üìä")

# Funci√≥n helper para convertir a num√©rico de forma segura
def to_numeric_safe(series):
    return pd.to_numeric(series, errors="coerce")

# ---------- HISTOGRAMA ----------
if hist_button:
    st.write("Creando un histograma del kilometraje seg√∫n el tipo de veh√≠culo:")
    if "odometer" not in car_data.columns:
        st.warning("La columna 'odometer' no existe en el dataset.")
    else:
        df_hist = car_data.copy()
        df_hist["odometer"] = to_numeric_safe(df_hist["odometer"])
        df_hist = df_hist.dropna(subset=["odometer"])
        if df_hist.empty:
            st.warning("No hay valores num√©ricos v√°lidos en 'odometer'.")
        else:
            try:
                if color_col:
                    fig_hist = px.histogram(
                        df_hist,
                        x="odometer",
                        color=color_col,
                        title="Distribuci√≥n del kilometraje por tipo de veh√≠culo",
                        color_discrete_sequence=px.colors.qualitative.Plotly
                    )
                else:
                    fig_hist = px.histogram(df_hist, x="odometer", title="Distribuci√≥n del kilometraje")
                st.plotly_chart(fig_hist, use_container_width=True)
            except Exception as e:
                st.error(f"Error al crear el histograma: {e}")

# ---------- SCATTER ----------
if scatter_button:
    st.write("Creaci√≥n de un gr√°fico de dispersi√≥n de odometer vs price")
    if ("odometer" not in car_data.columns) or ("price" not in car_data.columns):
        st.warning("Faltan las columnas 'odometer' y/o 'price' en el dataset.")
    else:
        df_sc = car_data.copy()
        df_sc["odometer"] = to_numeric_safe(df_sc["odometer"])
        df_sc["price"] = to_numeric_safe(df_sc["price"])
        df_sc = df_sc.dropna(subset=["odometer", "price"])
        if df_sc.empty:
            st.warning("No hay datos num√©ricos v√°lidos para 'odometer' y 'price'.")
        else:
            try:
                if color_col:
                    fig_scatter = px.scatter(
                        df_sc,
                        x="odometer",
                        y="price",
                        color=color_col,
                        hover_data=[c for c in ("model_year", "model", "make") if c in df_sc.columns],
                        title="Precio vs Kilometraje por tipo de veh√≠culo",
                        color_discrete_sequence=px.colors.qualitative.Plotly
                    )
                else:
                    fig_scatter = px.scatter(
                        df_sc,
                        x="odometer",
                        y="price",
                        hover_data=[c for c in ("model_year", "model", "make") if c in df_sc.columns],
                        title="Precio vs Kilometraje"
                    )
                st.plotly_chart(fig_scatter, use_container_width=True)
            except Exception as e:
                st.error(f"Error al crear el scatter: {e}")

# ---------- BARRAS ----------
if build_bar:
    st.write("Creaci√≥n de un gr√°fico de barras que muestra la cantidad de veh√≠culos por tipo")
    if color_col is None:
        st.warning("No hay columna 'type'/'make'/'model' para agrupar.")
    else:
        try:
            df_bar = car_data[color_col].fillna("Unknown").astype(str).value_counts().reset_index()
            df_bar.columns = [f"{color_col}_name", "count"]
            fig_bar = px.bar(
                df_bar,
                x=f"{color_col}_name",
                y="count",
                color=f"{color_col}_name",
                labels={f"{color_col}_name": "Tipo de veh√≠culo", "count": "Cantidad"},
                title="Cantidad de veh√≠culos por tipo",
                color_discrete_sequence=px.colors.qualitative.Plotly
            )
            st.plotly_chart(fig_bar, use_container_width=True)
        except Exception as e:
            st.error(f"Error al crear el gr√°fico de barras: {e}")

# ---------- Footer (opcional) ----------
st.markdown("---")
st.caption("üí° Si algo no se ve bien, no te preocupes: a veces los datos necesitan un peque√±o ajuste. ¬°Gracias por explorar esta app! üöó‚ú®")